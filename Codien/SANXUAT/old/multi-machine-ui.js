// Multi-Machine UI Support
// C·∫≠p nh·∫≠t UI ƒë·ªÉ h·ªó tr·ª£ nhi·ªÅu m√°y cho m·ªói c√¥ng ƒëo·∫°n

class MultiMachineManager {
    constructor() {
        this.currentStage = null;
        this.availableMachines = [];
    }

    // Kh·ªüi t·∫°o cho stage c·ª• th·ªÉ
    async initialize(stage) {
        this.currentStage = stage;
        await this.loadAvailableMachines();
        this.updateMachineSelectionUI();
    }

    // Load danh s√°ch m√°y r·∫£nh
    async loadAvailableMachines() {
        try {
            const response = await fetch(`/api/available_machines/${this.currentStage}`);
            const data = await response.json();
            
            if (response.ok) {
                this.availableMachines = data.available_machines;
                console.log(`üìä Loaded ${this.availableMachines.length} available machines for ${this.currentStage}`);
            } else {
                console.error('‚ùå Error loading machines:', data.error);
                this.availableMachines = [];
            }
        } catch (error) {
            console.error('‚ùå Error loading machines:', error);
            this.availableMachines = [];
        }
    }

    // C·∫≠p nh·∫≠t UI ch·ªçn m√°y
    updateMachineSelectionUI() {
        // C·∫≠p nh·∫≠t dropdown ch·ªçn m√°y trong sidebar
        const machineSelect = document.getElementById('machine-select');
        if (machineSelect) {
            machineSelect.innerHTML = '<option value="">Ch·ªçn m√°y...</option>';
            
            this.availableMachines.forEach(machine => {
                const option = document.createElement('option');
                option.value = machine.machine_id;
                option.textContent = `${machine.machine_name} (${machine.machine_id})`;
                machineSelect.appendChild(option);
            });
        }

        // C·∫≠p nh·∫≠t th√¥ng b√°o tr·∫°ng th√°i m√°y
        this.updateMachineStatusMessage();
    }

    // C·∫≠p nh·∫≠t th√¥ng b√°o tr·∫°ng th√°i m√°y
    updateMachineStatusMessage() {
        const statusElement = document.getElementById('machine-status-message');
        if (statusElement) {
            if (this.availableMachines.length === 0) {
                statusElement.innerHTML = `
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>T·∫•t c·∫£ m√°y ƒë·ªÅu ƒëang b·∫≠n</strong>
                        <br><small>Vui l√≤ng ch·ªù m√°y r·∫£nh ho·∫∑c k·∫øt th√∫c l·ªánh hi·ªán t·∫°i</small>
                    </div>
                `;
                statusElement.style.display = 'block';
            } else {
                statusElement.innerHTML = `
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        <strong>C√≥ ${this.availableMachines.length} m√°y r·∫£nh</strong>
                        <br><small>Vui l√≤ng ch·ªçn m√°y ƒë·ªÉ b·∫Øt ƒë·∫ßu s·∫£n xu·∫•t</small>
                    </div>
                `;
                statusElement.style.display = 'block';
            }
        }
    }

    // B·∫Øt ƒë·∫ßu s·∫£n xu·∫•t v·ªõi m√°y ƒë∆∞·ª£c ch·ªçn
    async startProductionWithMachine(orderId, machineId, workerName, note) {
        if (!machineId) {
            showNotification('‚ùå Vui l√≤ng ch·ªçn m√°y', 'error');
            return false;
        }

        try {
            const response = await fetch(`/api/start_production/${this.currentStage}/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    machine_id: machineId,
                    worker_name: workerName,
                    note: note
                })
            });

            const result = await response.json();

            if (response.ok) {
                showNotification(`‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu s·∫£n xu·∫•t tr√™n m√°y ${machineId}`, 'success');
                await this.loadAvailableMachines(); // Refresh danh s√°ch m√°y
                this.updateMachineSelectionUI();
                return true;
            } else {
                showNotification(`‚ùå ${result.message || result.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Error starting production:', error);
            showNotification('‚ùå L·ªói k·∫øt n·ªëi server', 'error');
            return false;
        }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t b·∫Øt ƒë·∫ßu trong b·∫£ng
    updateTableStartButtons() {
        const tableRows = document.querySelectorAll('#stageTableBody tr');
        
        tableRows.forEach(row => {
            const orderId = parseInt(row.getAttribute('data-order-id'));
            const startButton = row.querySelector('.btn-start-production');
            
            if (startButton) {
                const order = ordersData.find(o => o.id === orderId);
                if (order) {
                    const statusField = `${this.currentStage}_status`;
                    const endTimeField = `${this.currentStage}_end_time`;
                    const machineIdField = `${this.currentStage}_machine_id`;
                    
                    if (order[statusField] === 'completed' || order[endTimeField]) {
                        // L·ªánh ƒë√£ ho√†n th√†nh
                        startButton.disabled = true;
                        startButton.title = 'L·ªánh ƒë√£ ho√†n th√†nh';
                        startButton.classList.add('btn-secondary');
                        startButton.classList.remove('btn-primary', 'btn-warning');
                    } else if (order[machineIdField] && order[statusField] === 'in_progress') {
                        // L·ªánh ƒëang ch·∫°y tr√™n m√°y
                        startButton.disabled = true;
                        startButton.title = `ƒêang ch·∫°y tr√™n m√°y ${order[machineIdField]}`;
                        startButton.classList.add('btn-warning');
                        startButton.classList.remove('btn-primary', 'btn-secondary');
                    } else {
                        // C√≥ th·ªÉ b·∫Øt ƒë·∫ßu
                        if (this.availableMachines.length > 0) {
                            startButton.disabled = false;
                            startButton.title = `C√≥ ${this.availableMachines.length} m√°y r·∫£nh - Click ƒë·ªÉ ch·ªçn`;
                            startButton.classList.add('btn-primary');
                            startButton.classList.remove('btn-secondary', 'btn-warning');
                        } else {
                            startButton.disabled = true;
                            startButton.title = 'T·∫•t c·∫£ m√°y ƒë·ªÅu ƒëang b·∫≠n';
                            startButton.classList.add('btn-secondary');
                            startButton.classList.remove('btn-primary', 'btn-warning');
                        }
                    }
                }
            }
        });
    }

    // Hi·ªÉn th·ªã modal ch·ªçn m√°y
    showMachineSelectionModal(orderId) {
        if (this.availableMachines.length === 0) {
            showNotification('‚ùå Kh√¥ng c√≥ m√°y r·∫£nh', 'warning');
            return;
        }

        const modal = document.getElementById('machineSelectionModal');
        if (modal) {
            // C·∫≠p nh·∫≠t danh s√°ch m√°y trong modal
            const machineList = modal.querySelector('.machine-list');
            machineList.innerHTML = '';
            
            this.availableMachines.forEach(machine => {
                const machineItem = document.createElement('div');
                machineItem.className = 'machine-item';
                machineItem.innerHTML = `
                    <div class="machine-info">
                        <strong>${machine.machine_name}</strong>
                        <small class="text-muted">${machine.machine_id}</small>
                    </div>
                    <button class="btn btn-sm btn-primary select-machine-btn" 
                            data-machine-id="${machine.machine_id}"
                            data-machine-name="${machine.machine_name}">
                        Ch·ªçn
                    </button>
                `;
                machineList.appendChild(machineItem);
            });

            // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn m√°y
            machineList.querySelectorAll('.select-machine-btn').forEach(btn => {
                btn.onclick = () => {
                    const machineId = btn.getAttribute('data-machine-id');
                    const machineName = btn.getAttribute('data-machine-name');
                    this.selectMachineForOrder(orderId, machineId, machineName);
                    modal.style.display = 'none';
                };
            });

            modal.style.display = 'block';
        }
    }

    // Ch·ªçn m√°y cho l·ªánh
    async selectMachineForOrder(orderId, machineId, machineName) {
        // Hi·ªÉn th·ªã form nh·∫≠p th√¥ng tin
        const workerName = prompt(`Nh·∫≠p t√™n c√¥ng nh√¢n cho m√°y ${machineName}:`);
        if (!workerName) return;

        const note = prompt('Nh·∫≠p ghi ch√∫ (t√πy ch·ªçn):') || '';

        // B·∫Øt ƒë·∫ßu s·∫£n xu·∫•t
        const success = await this.startProductionWithMachine(orderId, machineId, workerName, note);
        
        if (success) {
            // Refresh data v√† UI
            if (typeof refreshData === 'function') {
                await refreshData();
            }
            this.updateTableStartButtons();
        }
    }
}

// Global instance
let multiMachineManager = null;

// Kh·ªüi t·∫°o khi trang load
function initializeMultiMachine(stage) {
    if (multiMachineManager) {
        multiMachineManager = null;
    }
    
    multiMachineManager = new MultiMachineManager();
    multiMachineManager.initialize(stage);
    
    console.log(`üöÄ Multi-machine manager initialized for stage: ${stage}`);
}

// H√†m b·∫Øt ƒë·∫ßu s·∫£n xu·∫•t t·ª´ b·∫£ng (c·∫≠p nh·∫≠t)
async function startProductionFromTable(orderId) {
    if (!multiMachineManager) {
        showNotification('‚ùå Multi-machine manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o', 'error');
        return;
    }

    const order = ordersData.find(o => o.id === orderId);
    if (!order) {
        showNotification('‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t', 'error');
        return;
    }

    // Ki·ªÉm tra tr·∫°ng th√°i l·ªánh
    const statusField = `${multiMachineManager.currentStage}_status`;
    const endTimeField = `${multiMachineManager.currentStage}_end_time`;
    
    if (order[statusField] === 'completed' || order[endTimeField]) {
        showNotification('‚ùå L·ªánh ƒë√£ ho√†n th√†nh', 'warning');
        return;
    }

    // Hi·ªÉn th·ªã modal ch·ªçn m√°y
    multiMachineManager.showMachineSelectionModal(orderId);
}

// Export cho s·ª≠ d·ª•ng global
window.MultiMachineManager = MultiMachineManager;
window.initializeMultiMachine = initializeMultiMachine;
window.startProductionFromTable = startProductionFromTable; 