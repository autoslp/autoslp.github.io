// UI ƒë∆°n gi·∫£n cho m√°y

class SimpleMachineManager {
    constructor() {
        this.availableMachines = [];
        this.machineStatus = [];
    }

    // Load danh s√°ch m√°y r·∫£nh
    async loadAvailableMachines() {
        try {
            const response = await fetch(API_CONFIG.getUrl(API_CONFIG.ENDPOINTS.AVAILABLE_MACHINES));
            const data = await response.json();
            
            if (response.ok) {
                this.availableMachines = data.available_machines;
                console.log(`üìä Loaded ${this.availableMachines.length} available machines`);
            } else {
                console.error('‚ùå Error loading machines:', data.error);
                this.availableMachines = [];
            }
        } catch (error) {
            console.error('‚ùå Error loading machines:', error);
            this.availableMachines = [];
        }
    }

    // Load tr·∫°ng th√°i m√°y
    async loadMachineStatus() {
        try {
            const response = await fetch(API_CONFIG.getUrl(API_CONFIG.ENDPOINTS.MACHINE_STATUS));
            const data = await response.json();
            
            if (response.ok) {
                this.machineStatus = data.machines;
                console.log(`üìä Loaded machine status for ${this.machineStatus.length} machines`);
            } else {
                console.error('‚ùå Error loading machine status:', data.error);
                this.machineStatus = [];
            }
        } catch (error) {
            console.error('‚ùå Error loading machine status:', error);
            this.machineStatus = [];
        }
    }

    // B·∫Øt ƒë·∫ßu l·ªánh tr√™n m√°y
    async startOrderOnMachine(machineId, orderId, orderCode) {
        try {
            const response = await fetch(API_CONFIG.getUrl(API_CONFIG.ENDPOINTS.START_ORDER_ON_MACHINE), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    machine_id: machineId,
                    order_id: orderId,
                    order_code: orderCode
                })
            });

            const result = await response.json();

            if (response.ok) {
                showNotification(`‚úÖ ${result.message}`, 'success');
                await this.loadAvailableMachines(); // Refresh danh s√°ch m√°y
                await this.loadMachineStatus(); // Refresh tr·∫°ng th√°i m√°y
                return true;
            } else {
                showNotification(`‚ùå ${result.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Error starting order on machine:', error);
            showNotification('‚ùå L·ªói k·∫øt n·ªëi server', 'error');
            return false;
        }
    }

    // K·∫øt th√∫c l·ªánh tr√™n m√°y
    async endOrderOnMachine(machineId, orderId) {
        try {
            const response = await fetch(API_CONFIG.getUrl(API_CONFIG.ENDPOINTS.END_ORDER_ON_MACHINE), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    machine_id: machineId,
                    order_id: orderId
                })
            });

            const result = await response.json();

            if (response.ok) {
                showNotification(`‚úÖ ${result.message}`, 'success');
                await this.loadAvailableMachines(); // Refresh danh s√°ch m√°y
                await this.loadMachineStatus(); // Refresh tr·∫°ng th√°i m√°y
                return true;
            } else {
                showNotification(`‚ùå ${result.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Error ending order on machine:', error);
            showNotification('‚ùå L·ªói k·∫øt n·ªëi server', 'error');
            return false;
        }
    }

    // Hi·ªÉn th·ªã modal ch·ªçn m√°y
    showMachineSelectionModal(orderId, orderCode) {
        if (this.availableMachines.length === 0) {
            showNotification('‚ùå Kh√¥ng c√≥ m√°y r·∫£nh', 'warning');
            return;
        }

        // T·∫°o modal ƒë∆°n gi·∫£n
        const modal = document.createElement('div');
        modal.className = 'modal fade show';
        modal.style.display = 'block';
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Ch·ªçn m√°y cho l·ªánh ${orderCode}</h5>
                        <button type="button" class="btn-close" onclick="this.closest('.modal').remove()"></button>
                    </div>
                    <div class="modal-body">
                        <p>C√≥ ${this.availableMachines.length} m√°y r·∫£nh:</p>
                        <div class="machine-list">
                            ${this.availableMachines.map(machine => `
                                <div class="machine-item d-flex justify-content-between align-items-center p-2 border-bottom">
                                    <div>
                                        <strong>${machine.machine_name}</strong>
                                        <br><small class="text-muted">${machine.machine_id}</small>
                                    </div>
                                    <button class="btn btn-sm btn-primary select-machine-btn" 
                                            data-machine-id="${machine.machine_id}"
                                            data-machine-name="${machine.machine_name}">
                                        Ch·ªçn
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Th√™m modal v√†o body
        document.body.appendChild(modal);

        // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn m√°y
        modal.querySelectorAll('.select-machine-btn').forEach(btn => {
            btn.onclick = async () => {
                const machineId = btn.getAttribute('data-machine-id');
                const machineName = btn.getAttribute('data-machine-name');
                
                // B·∫Øt ƒë·∫ßu l·ªánh tr√™n m√°y
                const success = await this.startOrderOnMachine(machineId, orderId, orderCode);
                
                if (success) {
                    // Refresh data v√† UI
                    if (typeof refreshData === 'function') {
                        await refreshData();
                    }
                    this.updateTableButtons();
                }
                
                // ƒê√≥ng modal
                modal.remove();
            };
        });
    }

    // C·∫≠p nh·∫≠t n√∫t trong b·∫£ng
    updateTableButtons() {
        const tableRows = document.querySelectorAll('#stageTableBody tr');
        
        tableRows.forEach(row => {
            const orderId = parseInt(row.getAttribute('data-order-id'));
            const startButton = row.querySelector('.btn-start-production');
            
            if (startButton) {
                const order = ordersData.find(o => o.id === orderId);
                if (order) {
                    // Ki·ªÉm tra m√°y c√≥ ƒëang ch·∫°y l·ªánh n√†y kh√¥ng
                    const machineRunningThisOrder = this.machineStatus.find(m => 
                        m.current_order_id === orderId
                    );
                    
                    // Ki·ªÉm tra m√°y c√≥ ƒëang ch·∫°y l·ªánh kh√°c kh√¥ng
                    const machineRunningOtherOrder = this.machineStatus.find(m => 
                        m.current_order_id !== null && m.current_order_id !== orderId
                    );
                    
                    if (order.xa_status === 'completed' || order.xa_end_time) {
                        // L·ªánh ƒë√£ ho√†n th√†nh
                        startButton.disabled = true;
                        startButton.title = 'L·ªánh ƒë√£ ho√†n th√†nh';
                        startButton.classList.add('btn-secondary');
                        startButton.classList.remove('btn-primary', 'btn-warning');
                    } else if (machineRunningThisOrder) {
                        // L·ªánh ƒëang ch·∫°y tr√™n m√°y
                        startButton.disabled = true;
                        startButton.title = `ƒêang ch·∫°y tr√™n m√°y ${machineRunningThisOrder.machine_id}`;
                        startButton.classList.add('btn-warning');
                        startButton.classList.remove('btn-primary', 'btn-secondary');
                    } else if (this.availableMachines.length > 0) {
                        // C√≥ th·ªÉ b·∫Øt ƒë·∫ßu
                        startButton.disabled = false;
                        startButton.title = `C√≥ ${this.availableMachines.length} m√°y r·∫£nh - Click ƒë·ªÉ ch·ªçn`;
                        startButton.classList.add('btn-primary');
                        startButton.classList.remove('btn-secondary', 'btn-warning');
                    } else {
                        // T·∫•t c·∫£ m√°y ƒë·ªÅu ƒëang b·∫≠n
                        startButton.disabled = true;
                        startButton.title = 'T·∫•t c·∫£ m√°y ƒë·ªÅu ƒëang b·∫≠n';
                        startButton.classList.add('btn-secondary');
                        startButton.classList.remove('btn-primary', 'btn-warning');
                    }
                }
            }
        });
    }

    // Kh·ªüi t·∫°o
    async initialize() {
        await this.loadAvailableMachines();
        await this.loadMachineStatus();
        this.updateTableButtons();
        console.log('üöÄ Simple machine manager initialized');
    }
}

// Global instance
let simpleMachineManager = null;

// Kh·ªüi t·∫°o khi trang load
async function initializeSimpleMachine() {
    if (simpleMachineManager) {
        simpleMachineManager = null;
    }
    
    simpleMachineManager = new SimpleMachineManager();
    await simpleMachineManager.initialize();
}

// H√†m b·∫Øt ƒë·∫ßu s·∫£n xu·∫•t t·ª´ b·∫£ng (ƒë∆°n gi·∫£n)
async function startProductionFromTable(orderId) {
    if (!simpleMachineManager) {
        showNotification('‚ùå Machine manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o', 'error');
        return;
    }

    const order = ordersData.find(o => o.id === orderId);
    if (!order) {
        showNotification('‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t', 'error');
        return;
    }

    // Ki·ªÉm tra tr·∫°ng th√°i l·ªánh
    if (order.xa_status === 'completed' || order.xa_end_time) {
        showNotification('‚ùå L·ªánh ƒë√£ ho√†n th√†nh', 'warning');
        return;
    }

    // Hi·ªÉn th·ªã modal ch·ªçn m√°y
    simpleMachineManager.showMachineSelectionModal(orderId, order.production_order);
}

// H√†m k·∫øt th√∫c s·∫£n xu·∫•t (ƒë∆°n gi·∫£n)
async function endProductionFromTable(orderId) {
    if (!simpleMachineManager) {
        showNotification('‚ùå Machine manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o', 'error');
        return;
    }

    const order = ordersData.find(o => o.id === orderId);
    if (!order) {
        showNotification('‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t', 'error');
        return;
    }

    // T√¨m m√°y ƒëang ch·∫°y l·ªánh n√†y
    const machineRunningThisOrder = simpleMachineManager.machineStatus.find(m => 
        m.current_order_id === orderId
    );

    if (!machineRunningThisOrder) {
        showNotification('‚ùå L·ªánh kh√¥ng ƒëang ch·∫°y tr√™n m√°y n√†o', 'warning');
        return;
    }

    // K·∫øt th√∫c l·ªánh tr√™n m√°y
    const success = await simpleMachineManager.endOrderOnMachine(
        machineRunningThisOrder.machine_id, 
        orderId
    );
    
    if (success) {
        // Refresh data v√† UI
        if (typeof refreshData === 'function') {
            await refreshData();
        }
        simpleMachineManager.updateTableButtons();
    }
}

// Export cho s·ª≠ d·ª•ng global
window.SimpleMachineManager = SimpleMachineManager;
window.initializeSimpleMachine = initializeSimpleMachine;
window.startProductionFromTable = startProductionFromTable;
window.endProductionFromTable = endProductionFromTable; 