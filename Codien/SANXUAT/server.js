const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');

const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

let db;

function handleDisconnect() {
  db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'anhvinh123', // ƒê·ªïi n·∫øu b·∫°n d√πng m·∫≠t kh·∫©u kh√°c
    database: 'autoslp',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    enableKeepAlive: true,
    keepAliveInitialDelay: 10000,
  });

  db.connect((err) => {
    if (err) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', err);
      setTimeout(handleDisconnect, 2000);
    } else {
      console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MySQL');
    }
  });

  db.on('error', (err) => {
    console.error('‚ö†Ô∏è MySQL error:', err);
    if (err.code === 'PROTOCOL_CONNECTION_LOST') {
      console.log('üîÑ M·∫•t k·∫øt n·ªëi DB, ƒëang k·∫øt n·ªëi l·∫°i...');
      handleDisconnect();
    } else {
      throw err;
    }
  });
}

handleDisconnect();

// ========== C√ÅC API C≈® ==========

app.get('/', (req, res) => {
  res.send('‚úÖ API Server is running.');
});

app.get('/data/may', (req, res) => {
  db.query('SELECT * FROM may', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng may');
    res.json(results);
  });
});

app.get('/data/user', (req, res) => {
  db.query('SELECT * FROM user', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng user');
    res.json(results);
  });
});

app.get('/data/congviec', (req, res) => {
  db.query('SELECT * FROM bao_tri_su_co', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng bao_tri_su_co');
    res.json(results);
  });
});

app.get('/data/air_conditioners', (req, res) => {
  db.query('SELECT * FROM air_conditioners', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_conditioners');
    res.json(results);
  });
});

app.get('/data/work_history', (req, res) => {
  db.query('SELECT * FROM air_work_history', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_work_history');
    res.json(results);
  });
});

app.get('/data/contractors', (req, res) => {
  db.query('SELECT * FROM air_contractors', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_contractors');
    res.json(results);
  });
});

app.get('/data/air_areas', (req, res) => {
  db.query('SELECT * FROM air_areas', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_areas');
    res.json(results);
  });
});

app.get('/data/air_ac_types', (req, res) => {
  db.query('SELECT * FROM air_ac_types', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_ac_types');
    res.json(results);
  });
});

app.get('/data/air_locations', (req, res) => {
  db.query('SELECT * FROM air_locations', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_locations');
    res.json(results);
  });
});

app.get('/data/air_brands', (req, res) => {
  db.query('SELECT * FROM air_brands', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng air_brands');
    res.json(results);
  });
});

// ========== MACHINE MANAGEMENT APIs ==========

// M√°y m√≥c - machines
app.get('/data/machines', (req, res) => {
  db.query('SELECT * FROM machines', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machines');
    res.json(results);
  });
});

app.get('/data/machines/:id', (req, res) => {
  const { id } = req.params;
  db.query('SELECT * FROM machines WHERE id = ?', [id], (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n m√°y m√≥c');
    if (results.length === 0) return res.status(404).send('‚ùå Kh√¥ng t√¨m th·∫•y m√°y m√≥c');
    res.json(results[0]);
  });
});

// L·ªãch s·ª≠ c√¥ng vi·ªác m√°y m√≥c - machine_work_history
app.get('/data/machine_work_history', (req, res) => {
  db.query('SELECT * FROM machine_work_history ORDER BY work_date DESC', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_work_history');
    res.json(results);
  });
});

app.get('/data/machine_work_history/:machine_id', (req, res) => {
  const { machine_id } = req.params;
  db.query('SELECT * FROM machine_work_history WHERE machine_id = ? ORDER BY work_date DESC', [machine_id], (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n l·ªãch s·ª≠ c√¥ng vi·ªác');
    res.json(results);
  });
});

// Nh√† th·∫ßu m√°y m√≥c - machine_contractors
app.get('/data/machine_contractors', (req, res) => {
  const activeOnly = req.query.active === 'true';
  const query = activeOnly ? 'SELECT * FROM machine_contractors WHERE is_active = 1' : 'SELECT * FROM machine_contractors';
  
  db.query(query, (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_contractors');
    res.json(results);
  });
});

// Th·ªëng k√™ m√°y m√≥c - machine_statistics
app.get('/data/machine_statistics', (req, res) => {
  const statisticsQuery = `
    SELECT 
      COUNT(*) as total_machines,
      SUM(CASE WHEN status = 'excellent' THEN 1 ELSE 0 END) as excellent_count,
      SUM(CASE WHEN status = 'good' THEN 1 ELSE 0 END) as good_count,
      SUM(CASE WHEN status = 'maintenance' THEN 1 ELSE 0 END) as maintenance_count,
      SUM(CASE WHEN status = 'repair' THEN 1 ELSE 0 END) as repair_count,
      SUM(CASE WHEN status = 'broken' THEN 1 ELSE 0 END) as broken_count
    FROM machines
  `;
  
  db.query(statisticsQuery, (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n th·ªëng k√™ m√°y m√≥c');
    
    const stats = results[0];
    const response = {
      total_machines: stats.total_machines,
      machine_by_status: {
        excellent: stats.excellent_count,
        good: stats.good_count,
        maintenance: stats.maintenance_count,
        repair: stats.repair_count,
        broken: stats.broken_count
      },
      upcoming_maintenance: [],
      work_by_type: [],
      monthly_works: []
    };
    
    res.json(response);
  });
});

// Lo·∫°i m√°y m√≥c - machine_types
app.get('/data/machine_types', (req, res) => {
  db.query('SELECT * FROM machine_types WHERE is_active = 1', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_types');
    res.json(results);
  });
});

// Khu v·ª±c m√°y m√≥c - machine_areas
app.get('/data/machine_areas', (req, res) => {
  db.query('SELECT * FROM machine_areas WHERE is_active = 1', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_areas');
    res.json(results);
  });
});

// V·ªã tr√≠ m√°y m√≥c - machine_locations
app.get('/data/machine_locations', (req, res) => {
  const areaId = req.query.area_id;
  let query = 'SELECT * FROM machine_locations WHERE is_active = 1';
  let params = [];
  
  if (areaId) {
    query += ' AND area_id = ?';
    params.push(areaId);
  }
  
  db.query(query, params, (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_locations');
    res.json(results);
  });
});

// Th∆∞∆°ng hi·ªáu m√°y m√≥c - machine_brands
app.get('/data/machine_brands', (req, res) => {
  db.query('SELECT * FROM machine_brands WHERE is_active = 1', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_brands');
    res.json(results);
  });
});

// Ph·ª• t√πng m√°y m√≥c - machine_parts
app.get('/data/machine_parts', (req, res) => {
  db.query('SELECT * FROM machine_parts WHERE is_active = 1', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_parts');
    res.json(results);
  });
});

// T·ªìn kho ph·ª• t√πng - machine_inventory
app.get('/data/machine_inventory', (req, res) => {
  const query = `
    SELECT 
      i.*,
      p.name as part_name,
      p.code as part_code,
      p.category,
      p.brand as part_brand,
      p.unit,
      p.cost
    FROM machine_inventory i
    JOIN machine_parts p ON i.part_id = p.id
    ORDER BY i.location, p.name
  `;
  
  db.query(query, (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_inventory');
    res.json(results);
  });
});

// C√†i ƒë·∫∑t h·ªá th·ªëng - machine_system_settings
app.get('/data/machine_system_settings', (req, res) => {
  db.query('SELECT * FROM machine_system_settings', (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n b·∫£ng machine_system_settings');
    res.json(results);
  });
});

app.get('/data/machine_system_settings/:key', (req, res) => {
  const { key } = req.params;
  db.query('SELECT * FROM machine_system_settings WHERE setting_key = ?', [key], (err, results) => {
    if (err) return res.status(500).send('‚ùå L·ªói truy v·∫•n c√†i ƒë·∫∑t h·ªá th·ªëng');
    if (results.length === 0) return res.status(404).send('‚ùå Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t');
    res.json(results[0]);
  });
});

// ========== PRODUCTION ORDERS APIs ==========

// L·∫•y t·∫•t c·∫£ l·ªánh s·∫£n xu·∫•t v·ªõi b·ªô l·ªçc
app.get('/data/production_orders', (req, res) => {
  let query = 'SELECT * FROM production_orders WHERE 1=1';
  let params = [];
  
  // B·ªô l·ªçc theo ng√†y tri·ªÉn khai
  if (req.query.deployment_date) {
    query += ' AND deployment_date = ?';
    params.push(req.query.deployment_date);
  }
  
  // B·ªô l·ªçc theo tr·∫°ng th√°i
  if (req.query.status) {
    query += ' AND status = ?';
    params.push(req.query.status);
  }
  
  // B·ªô l·ªçc theo kh√°ch h√†ng
  if (req.query.customer_name) {
    query += ' AND customer_name LIKE ?';
    params.push(`%${req.query.customer_name}%`);
  }
  
  // T√¨m ki·∫øm theo t·ª´ kh√≥a
  if (req.query.search) {
    query += ' AND (production_order LIKE ? OR po_number LIKE ? OR product_name LIKE ? OR customer_name LIKE ?)';
    const searchTerm = `%${req.query.search}%`;
    params.push(searchTerm, searchTerm, searchTerm, searchTerm);
  }
  
  // S·∫Øp x·∫øp
  query += ' ORDER BY created_at DESC';
  
  // Ph√¢n trang
  if (req.query.limit) {
    query += ' LIMIT ?';
    params.push(parseInt(req.query.limit));
    
    if (req.query.offset) {
      query += ' OFFSET ?';
      params.push(parseInt(req.query.offset));
    }
  }
  
  db.query(query, params, (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n production_orders:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n d·ªØ li·ªáu', details: err.message });
    }
    res.json(results);
  });
});

// L·∫•y chi ti·∫øt m·ªôt l·ªánh s·∫£n xu·∫•t
app.get('/data/production_orders/:id', (req, res) => {
  const { id } = req.params;
  db.query('SELECT * FROM production_orders WHERE id = ?', [id], (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n l·ªánh s·∫£n xu·∫•t:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n d·ªØ li·ªáu' });
    }
    if (results.length === 0) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t' });
    }
    res.json(results[0]);
  });
});

// T·∫°o l·ªánh s·∫£n xu·∫•t m·ªõi
app.post('/data/production_orders', (req, res) => {
  const {
    deployment_date, production_order, po_number, sales_order_code, order_date, delivery_date,
    internal_product_code, order_type, customer_code, customer_name, product_name, version,
    not_deployed_reason, sales_note, customer_production_note, order_quantity, inventory,
    required_quantity, deployed_quantity, offset_waste, waste, sheet_count, product_length,
    product_width, product_height, paper_length, paper_width, part_count, color_count,
    customer_group, paper_type, paper_weight, work_stage, status
  } = req.body;
  
  const query = `
    INSERT INTO production_orders (
      deployment_date, production_order, po_number, sales_order_code, order_date, delivery_date,
      internal_product_code, order_type, customer_code, customer_name, product_name, version,
      not_deployed_reason, sales_note, customer_production_note, order_quantity, inventory,
      required_quantity, deployed_quantity, offset_waste, waste, sheet_count, product_length,
      product_width, product_height, paper_length, paper_width, part_count, color_count,
      customer_group, paper_type, paper_weight, work_stage, status
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;
  
  db.query(query, [
    deployment_date, production_order, po_number, sales_order_code, order_date, delivery_date,
    internal_product_code, order_type, customer_code, customer_name, product_name, version,
    not_deployed_reason, sales_note, customer_production_note, order_quantity || 0, inventory || 0,
    required_quantity || 0, deployed_quantity || 0, offset_waste || 0, waste || 0, sheet_count || 0,
    product_length, product_width, product_height, paper_length, paper_width, part_count || 0,
    color_count || 0, customer_group, paper_type, paper_weight, work_stage, status || 'Ch·ªù tri·ªÉn khai'
  ], (err, result) => {
    if (err) {
      console.error('‚ùå L·ªói t·∫°o l·ªánh s·∫£n xu·∫•t:', err);
      return res.status(500).json({ error: 'L·ªói t·∫°o l·ªánh s·∫£n xu·∫•t', details: err.message });
    }
    res.json({ 
      success: true, 
      id: result.insertId, 
      message: 'T·∫°o l·ªánh s·∫£n xu·∫•t th√†nh c√¥ng' 
    });
  });
});

// C·∫≠p nh·∫≠t l·ªánh s·∫£n xu·∫•t
app.put('/data/production_orders/:id', (req, res) => {
  const { id } = req.params;
  const {
    deployment_date, production_order, po_number, sales_order_code, order_date, delivery_date,
    internal_product_code, order_type, customer_code, customer_name, product_name, version,
    not_deployed_reason, sales_note, customer_production_note, order_quantity, inventory,
    required_quantity, deployed_quantity, offset_waste, waste, sheet_count, product_length,
    product_width, product_height, paper_length, paper_width, part_count, color_count,
    customer_group, paper_type, paper_weight, work_stage, status
  } = req.body;
  
  const query = `
    UPDATE production_orders SET 
      deployment_date = ?, production_order = ?, po_number = ?, sales_order_code = ?, 
      order_date = ?, delivery_date = ?, internal_product_code = ?, order_type = ?, 
      customer_code = ?, customer_name = ?, product_name = ?, version = ?,
      not_deployed_reason = ?, sales_note = ?, customer_production_note = ?, 
      order_quantity = ?, inventory = ?, required_quantity = ?, deployed_quantity = ?, 
      offset_waste = ?, waste = ?, sheet_count = ?, product_length = ?, product_width = ?, 
      product_height = ?, paper_length = ?, paper_width = ?, part_count = ?, color_count = ?,
      customer_group = ?, paper_type = ?, paper_weight = ?, work_stage = ?, status = ?,
      updated_at = CURRENT_TIMESTAMP
    WHERE id = ?
  `;
  
  db.query(query, [
    deployment_date, production_order, po_number, sales_order_code, order_date, delivery_date,
    internal_product_code, order_type, customer_code, customer_name, product_name, version,
    not_deployed_reason, sales_note, customer_production_note, order_quantity || 0, inventory || 0,
    required_quantity || 0, deployed_quantity || 0, offset_waste || 0, waste || 0, sheet_count || 0,
    product_length, product_width, product_height, paper_length, paper_width, part_count || 0,
    color_count || 0, customer_group, paper_type, paper_weight, work_stage, status, id
  ], (err, result) => {
    if (err) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t l·ªánh s·∫£n xu·∫•t:', err);
      return res.status(500).json({ error: 'L·ªói c·∫≠p nh·∫≠t l·ªánh s·∫£n xu·∫•t', details: err.message });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t' });
    }
    res.json({ 
      success: true, 
      message: 'C·∫≠p nh·∫≠t l·ªánh s·∫£n xu·∫•t th√†nh c√¥ng' 
    });
  });
});

// X√≥a l·ªánh s·∫£n xu·∫•t
app.delete('/data/production_orders/:id', (req, res) => {
  const { id } = req.params;
  db.query('DELETE FROM production_orders WHERE id = ?', [id], (err, result) => {
    if (err) {
      console.error('‚ùå L·ªói x√≥a l·ªánh s·∫£n xu·∫•t:', err);
      return res.status(500).json({ error: 'L·ªói x√≥a l·ªánh s·∫£n xu·∫•t', details: err.message });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªánh s·∫£n xu·∫•t' });
    }
    res.json({ 
      success: true, 
      message: 'X√≥a l·ªánh s·∫£n xu·∫•t th√†nh c√¥ng' 
    });
  });
});

// Th·ªëng k√™ t·ªïng quan l·ªánh s·∫£n xu·∫•t
app.get('/data/production_orders_stats', (req, res) => {
  db.query('SELECT * FROM production_orders_stats', (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n th·ªëng k√™:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n th·ªëng k√™' });
    }
    res.json(results[0] || {});
  });
});

// Th·ªëng k√™ theo kh√°ch h√†ng
app.get('/data/customer_orders_stats', (req, res) => {
  db.query('SELECT * FROM customer_orders_stats LIMIT 10', (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n th·ªëng k√™ kh√°ch h√†ng:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n th·ªëng k√™ kh√°ch h√†ng' });
    }
    res.json(results);
  });
});

// Th·ªëng k√™ theo th√°ng
app.get('/data/monthly_orders_stats', (req, res) => {
  db.query('SELECT * FROM monthly_orders_stats LIMIT 12', (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n th·ªëng k√™ theo th√°ng:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n th·ªëng k√™ theo th√°ng' });
    }
    res.json(results);
  });
});

// L·∫•y danh s√°ch kh√°ch h√†ng distinct
app.get('/data/customers', (req, res) => {
  const query = `
    SELECT DISTINCT customer_name, customer_code, customer_group
    FROM production_orders 
    WHERE customer_name IS NOT NULL AND customer_name != ''
    ORDER BY customer_name
  `;
  
  db.query(query, (err, results) => {
    if (err) {
      console.error('‚ùå L·ªói truy v·∫•n danh s√°ch kh√°ch h√†ng:', err);
      return res.status(500).json({ error: 'L·ªói truy v·∫•n danh s√°ch kh√°ch h√†ng' });
    }
    res.json(results);
  });
});

// Kh·ªüi ƒë·ªông server
app.listen(port, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
});
